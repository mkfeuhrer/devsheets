[
  {
    "id": "redis",
    "color": "#b40000",
    "image": "redis.png",
    "description": "Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker",
    "url": "https://redis.io/",
    "tags": ["database", "sql"],
    "cheatsheet": [
      {
        "command": "redis-cli",
        "description": "Open redis prompt"
      },
      {
        "command": "redis-cli INFO",
        "description": "Server Statistics"
      },
      {
        "command": "KEYS pattern",
        "description": "Get All keys matching the pattern"
      },
      {
        "command": "EXISTS key",
        "description": "Check if key exists"
      },
      {
        "command": "SET key value",
        "description": "Set value in key"
      },
      {
        "command": "SETNX key value",
        "description": "Set if not exist value in key"
      },
      {
        "command": "APPEND key value",
        "description": "Append a value to a key"
      },
      {
        "command": "GET key",
        "description": "Get value in key"
      },
      {
        "command": "INCR key",
        "description": "Increment value in key"
      },
      {
        "command": "DECR key",
        "description": "Decrement value in key"
      },
      {
        "command": "DEL key",
        "description": "Delete key"
      },
      {
        "command": "TTL key",
        "description": "Number of seconds until a key is deleted"
      },
      {
        "command": "EXPIRE key seconds",
        "description": "Set key TTL"
      },
      {
        "command": "MSET key value [key value ...]",
        "description": "Set multiple keys to multiple values"
      },
      {
        "command": "CONFIG GET \\*",
        "description": "List of all active configuration variables you can change."
      },
      {
        "command": "FLUSHDB",
        "description": "Drop the currently selected database"
      }
    ]
  },
  {
    "id": "git",
    "color": "#b40000",
    "image": "git.png",
    "description": "Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency",
    "url": "https://git-scm.com/",
    "tags": ["codebase"],
    "cheatsheet": [
      {
        "command": "git init",
        "description": "Creates an empty Git repository in the specified directory."
      },
      {
        "command": "git clone <repository name>",
        "description": "Clones a repository located at <repository name> onto your local machine."
      },
      {
        "command": "git add <directory>",
        "description": "Stages only the specified changes for the next commit. Replace <directory> with a <file> to change a specific file."
      },
      {
        "command": "git add .",
        "description": "Stages new files and modifications without deletions"
      },
      {
        "command": "git add -A",
        "description": "Stages all changes"
      },
      {
        "command": "git add -all",
        "description": "Equivalent to git add -A"
      },
      {
        "command": "git add -u",
        "description": "Stages modifications and deletions without adding new files"
      },
      {
        "command": "git add --update",
        "description": "Equivalent to git add -u"
      },
      {
        "command": "git commit -m ”<message>”",
        "description": "Commits the staged snapshot. replace <message> with the commit message."
      },
      {
        "command": "git status",
        "description": "List which files are staged unstaged and untracked."
      },
      {
        "command": "git log",
        "description": "Displays the entire commit history using the default format."
      },
      {
        "command": "git diff",
        "description": "Shows unstaged changes between your index and working directory."
      },
      {
        "command": "git pull",
        "description": "Fetchs the remote copy of the current branch."
      },
      {
        "command": "git pull --rebase <remote>",
        "description": "Fetchs the remote copy of current branch and rebases it into the local copy. Use git rebase instead of merge to integrate the branches."
      },
      {
        "command": "git push origin master",
        "description": "Push all of your commits to master branch."
      },
      {
        "command": "git push <remote> --all",
        "description": "Push all of your local branches to the specified remote."
      },
      {
        "command": "git push <remote> --tags",
        "description": "Tags aren’t automatically pushed when you push a branch or use the --all flag. The --tags flag sends all of your local tags to the remote repo."
      },
      {
        "command": "git push <remote> --force",
        "description": "Forces the git push even if it results in a non-fast-forward merge. Do not use the --force flag unless you’re absolutely sure you know what you’re doing."
      },
      {
        "command": "git revert <commit>",
        "description": "Creates new commit that undoes all of the changes made in <commit> and then applys it to the current branch."
      },
      {
        "command": "git reset <file>",
        "description": "Removes <file> from the staging area but leaves the working directory unchanged - This unstages a file without overwriting any changes."
      },
      {
        "command": "git clean -n",
        "description": "Shows which files would be removed from working directory. Use the -f flag in place of the -n flag to execute the clean."
      },
      {
        "command": "git commit --amend",
        "description": "Replaces the last commit with the staged changes and last commit combined. Use with nothing staged to edit the last commit’s message."
      },
      {
        "command": "git rebase <base>",
        "description": "Rebase the current branch onto <base>. <base> can be a commit ID a branch name a tag or a relative reference to HEAD."
      },
      {
        "command": "git reflog",
        "description": "Show a log of changes to the local repository’s HEAD. Add --relative-date flag to show date info or --all to show all refs."
      },
      {
        "command": "git branch",
        "description": "Lists all of the branches in your repo."
      },
      {
        "command": "git branch <branch name>",
        "description": "Creates a new branch with the name <branch name>."
      },
      {
        "command": "git checkout -b <branch name>",
        "description": "Creates and check out a new branch named <branch name>."
      },
      {
        "command": "git checkout <branch name>",
        "description": "Checkout an existing branch."
      },
      {
        "command": "git merge <branch>",
        "description": "Merge <branch> into the current branch."
      },
      {
        "command": "git remote add <name> <url>",
        "description": "Creates a new connecti"
      },
      {
        "command": "git log --stat",
        "description": "Include which files were altered and the relative number of lineson to a remote repo. After adding a remote you can use <name> as a shortcut for <url> in other commands."
      },
      {
        "command": "git fetch <remote> <branch>",
        "description": "Fetches a specific <branch> from the repo. Leave off <branch> to fetch all remote refs."
      },
      {
        "command": "git pull <remote>",
        "description": "Fetches the specified remote’s copy of current branch and immediately merge it into the local copy."
      },
      {
        "command": "git push <remote> <branch>",
        "description": "Pushes the branch to <remote> along with necessary commits and objects. Creates named branch in the remote repo if it doesn’t exist."
      },
      {
        "command": "git config --global user.name <name>",
        "description": "Defines the author name to be used for all commits by the current user."
      },
      {
        "command": "git config --global user.email <email>",
        "description": "Defines the author email to be used for all commits by the current user."
      },
      {
        "command": "git config --global alias. <alias-name> <git-command>",
        "description": "Creates shortcut for a Git command. E.g. alias.p push will set git p equivalent to git push."
      },
      {
        "command": "git config --system core.editor <editor>",
        "description": "Set text editor used by commands for all users on the machine. <editor> arg should be the command that launches the desired editor (e.g; vi)."
      },
      {
        "command": "git config --global --edit",
        "description": "Opens the global configuration file in a text editor for manual editing."
      },
      {
        "command": "git log -<limit>",
        "description": "Limits the number of git rebase -i E.g. git log -5 will limit to 5 commits."
      },
      {
        "command": "git log --oneline",
        "description": "Condenses each commit to a single line."
      },
      {
        "command": "git log -p",
        "description": "Displays the full diff of each commit."
      },
      {
        "command": "git log --stat",
        "description": "Include which files were altered and the relative number of lines that were added or deleted from each of them."
      },
      {
        "command": "git log --author= ”<pattern>”",
        "description": "Searchs for commits by a particular author."
      },
      {
        "command": "git log --grep=”<pattern>”",
        "description": "Searchs for commits with a commit message that matches <pattern>."
      },
      {
        "command": "git log <since>..<until>",
        "description": "Shows commits that occur between <since> and <until>. Args can be a any kind of revision reference."
      },
      {
        "command": "git log -- <file>",
        "description": "Only display commits that have the specified file."
      },
      {
        "command": "git log --graph --decorate",
        "description": "--graph flag draws a text based graph of commits on left side of commit msgs. --decorate adds names of branches or tags of commits shown."
      },
      {
        "command": "git diff HEAD",
        "description": "Shows difference between working directory and last commit."
      },
      {
        "command": "git diff --cached",
        "description": "Shows difference between staged changes and last commit"
      },
      {
        "command": "git reset",
        "description": "Resets the staging area to match most recent commit but leaves the working directory unchanged."
      },
      {
        "command": "git reset --hard",
        "description": "Resets the staging area and working directory to match most recent commit and overwrites all changes in the working directory."
      },
      {
        "command": "git reset <commit>",
        "description": "Moves the current branch tip backward to <commit> resets the staging area to match but leaves the working directory unchanged."
      },
      {
        "command": "git reset --hard <commit>",
        "description": "Same as previous but resets both the staging area & working directory to match. Deletes uncommitted changes and all commits after <commit>."
      },
      {
        "command": "git rebase -i <base>",
        "description": "Interactively rebase current branch onto <base>. Launches editor to enter commands for how each commit will be transferred to the new base."
      }
    ]
  },
  {
    "id": "HTTP Codes",
    "color": "#b40000",
    "image": "http.png",
    "description": "HTTP response status codes indicate whether a specific HTTP request has been successfully completed. Status codes are issued by a server in response to a client's request made to the server.",
    "url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status",
    "tags": ["web"],
    "cheatsheet": [
      {
        "command": 100,
        "description": "Continue"
      },
      {
        "command": 101,
        "description": "Switching Protocols"
      },
      {
        "command": 200,
        "description": "OK"
      },
      {
        "command": 201,
        "description": "Created"
      },
      {
        "command": 202,
        "description": "Accepted"
      },
      {
        "command": 203,
        "description": "Non-Authoritative Information"
      },
      {
        "command": 204,
        "description": "No Content"
      },
      {
        "command": 205,
        "description": "Reset Content"
      },
      {
        "command": 206,
        "description": "Partial Content"
      },
      {
        "command": 300,
        "description": "Multiple Choices"
      },
      {
        "command": 301,
        "description": "Moved Permanently"
      },
      {
        "command": 302,
        "description": "Found"
      },
      {
        "command": 303,
        "description": "See Other"
      },
      {
        "command": 304,
        "description": "Not Modified"
      },
      {
        "command": 305,
        "description": "Use Proxy"
      },
      {
        "command": 307,
        "description": "Temporary Redirect"
      },
      {
        "command": 400,
        "description": "Bad Request"
      },
      {
        "command": 401,
        "description": "Unauthorized"
      },
      {
        "command": 402,
        "description": "Payment Required"
      },
      {
        "command": 403,
        "description": "Forbidden"
      },
      {
        "command": 404,
        "description": "Not Found"
      },
      {
        "command": 405,
        "description": "Method Not Allowed"
      },
      {
        "command": 406,
        "description": "Not Acceptable"
      },
      {
        "command": 407,
        "description": "Proxy Authentication Required"
      },
      {
        "command": 408,
        "description": "Request Timeout"
      },
      {
        "command": 409,
        "description": "Conflict"
      },
      {
        "command": 410,
        "description": "Gone"
      },
      {
        "command": 411,
        "description": "Length Required"
      },
      {
        "command": 412,
        "description": "Precondition Failed"
      },
      {
        "command": 413,
        "description": "Request Entity Too Large"
      },
      {
        "command": 414,
        "description": "Request-URI Too Long"
      },
      {
        "command": 415,
        "description": "Unsupported Media Type"
      },
      {
        "command": 416,
        "description": "Requested Range Not Satisfiable"
      },
      {
        "command": 417,
        "description": "Expectation Failed"
      },
      {
        "command": 500,
        "description": "Internal Server Error"
      },
      {
        "command": 501,
        "description": "Not Implemented"
      },
      {
        "command": 502,
        "description": "Bad Gateway"
      },
      {
        "command": 503,
        "description": "Service Unavailable"
      },
      {
        "command": 504,
        "description": "Gateway Timeout"
      },
      {
        "command": 505,
        "description": "HTTP Version Not Supported"
      }
    ]
  },
  {
    "id": "Vim",
    "color": "#b40000",
    "image": "vim.png",
    "description": "Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient. It is included as 'vi' with most UNIX systems and with Apple OS X",
    "url": "https://www.vim.org/",
    "tags": ["editors", "terminals"],
    "cheatsheet": [
      {
        "command": ":help keyword",
        "description": "open help for keyword"
      },
      {
        "command": ":o file",
        "description": "open file"
      },
      {
        "command": ":saveas file",
        "description": "save file as"
      },
      {
        "command": ":close",
        "description": "close current pane"
      },
      {
        "command": "h",
        "description": "move cursor left"
      },
      {
        "command": "j",
        "description": "move cursor down"
      },
      {
        "command": "k",
        "description": "move cursor up"
      },
      {
        "command": "l",
        "description": "move cursor right"
      },
      {
        "command": "H",
        "description": "move to top of screen"
      },
      {
        "command": "M",
        "description": "move to middle of screen"
      },
      {
        "command": "L",
        "description": "move to bottom of screen"
      },
      {
        "command": "w",
        "description": "jump forwards to the start of a word"
      },
      {
        "command": "W",
        "description": "jump forwards to the start of a word (words can contain punctuation)"
      },
      {
        "command": "e",
        "description": "jump forwards to the end of a word"
      },
      {
        "command": "E",
        "description": "jump forwards to the end of a word (words can contain punctuation)"
      },
      {
        "command": "b",
        "description": "jump backwards to the start of a word"
      },
      {
        "command": "B",
        "description": "jump backwards to the start of a word (words can contain punctuation)"
      },
      {
        "command": 0,
        "description": "jump to the start of the line"
      },
      {
        "command": "^",
        "description": "jump to the first non-blank character of the line"
      },
      {
        "command": "$",
        "description": "jump to the end of the line"
      },
      {
        "command": "g_",
        "description": "jump to the last non-blank character of the line"
      },
      {
        "command": "gg",
        "description": "go to the first line of the document"
      },
      {
        "command": "G",
        "description": "go to the last line of the document"
      },
      {
        "command": "5G",
        "description": "go to line 5"
      },
      {
        "command": "fx",
        "description": "jump to next occurrence of character x"
      },
      {
        "command": "tx",
        "description": "jump to before next occurrence of character x"
      },
      {
        "command": "}",
        "description": "jump to next paragraph (or function/block"
      },
      {
        "command": "{",
        "description": "jump to previous paragraph (or function/block"
      },
      {
        "command": "zz",
        "description": "center cursor on screen"
      },
      {
        "command": "Ctrl + b",
        "description": "move back one full screen"
      },
      {
        "command": "Ctrl + f",
        "description": "move forward one full screen"
      },
      {
        "command": "Ctrl + d",
        "description": "move forward 1/2 a screen"
      },
      {
        "command": "Ctrl + u",
        "description": "move back 1/2 a screen"
      },
      {
        "command": "i",
        "description": "insert before the cursor"
      },
      {
        "command": "I",
        "description": "insert at the beginning of the line"
      },
      {
        "command": "a",
        "description": "insert (append) after the cursor"
      },
      {
        "command": "A",
        "description": "insert (append) at the end of the line"
      },
      {
        "command": "o",
        "description": "append (open) a new line below the current line"
      },
      {
        "command": "O",
        "description": "append (open) a new line above the current line"
      },
      {
        "command": "ea",
        "description": "insert (append) at the end of the word"
      },
      {
        "command": "Esc",
        "description": "exit insert mode"
      },
      {
        "command": "r",
        "description": "replace a single character"
      },
      {
        "command": "J",
        "description": "join line below to the current one"
      },
      {
        "command": "cc",
        "description": "change (replace) entire line"
      },
      {
        "command": "cw",
        "description": "change (replace) to the start of the next word"
      },
      {
        "command": "ce",
        "description": "change (replace) to the end of the next word"
      },
      {
        "command": "cb",
        "description": "change (replace) to the start of the previous word"
      },
      {
        "command": "c0",
        "description": "change (replace) to the start of the line"
      },
      {
        "command": "c$",
        "description": "change (replace) to the end of the line"
      },
      {
        "command": "s",
        "description": "delete character and substitute text"
      },
      {
        "command": "S",
        "description": "delete line and substitute text (same as cc)"
      },
      {
        "command": "xp",
        "description": "transpose two letters (delete and paste)"
      },
      {
        "command": ".",
        "description": "repeat last command"
      },
      {
        "command": "u",
        "description": "undo"
      },
      {
        "command": "Ctrl + r",
        "description": "redo"
      },
      {
        "command": "v",
        "description": "start visual mode"
      },
      {
        "command": "V",
        "description": "start linewise visual mode"
      },
      {
        "command": "o",
        "description": "move to other end of marked area"
      },
      {
        "command": "O",
        "description": "move to other corner of block"
      },
      {
        "command": "aw",
        "description": "mark a word"
      },
      {
        "command": "ab",
        "description": "a block with ()"
      },
      {
        "command": "aB",
        "description": "a block with {}"
      },
      {
        "command": "ib",
        "description": "inner block with ()"
      },
      {
        "command": "iB",
        "description": "inner block with {}"
      },
      {
        "command": "Esc",
        "description": "exit visual mode"
      },
      {
        "command": "Ctrl + v",
        "description": "start visual block mode"
      },
      {
        "command": ">",
        "description": "shift text right"
      },
      {
        "command": "<",
        "description": "shift text left"
      },
      {
        "command": "y",
        "description": "yank (copy) marked text"
      },
      {
        "command": "d",
        "description": "delete marked text"
      },
      {
        "command": "~",
        "description": "switch case"
      },
      {
        "command": "yy",
        "description": "yank (copy) a line"
      },
      {
        "command": "2yy",
        "description": "yank (copy) 2 lines"
      },
      {
        "command": "yw",
        "description": "yank (copy) the characters of the word from the cursor position to the start of the next word"
      },
      {
        "command": "y$",
        "description": "yank (copy) to end of line"
      },
      {
        "command": "p",
        "description": "put (paste) the clipboard after cursor"
      },
      {
        "command": "P",
        "description": "put (paste) before cursor"
      },
      {
        "command": "dd",
        "description": "delete (cut) a line"
      },
      {
        "command": "2dd",
        "description": "delete (cut) 2 lines"
      },
      {
        "command": "dw",
        "description": "delete (cut) the characters of the word from the cursor position to the start of the next word"
      },
      {
        "command": "D",
        "description": "delete (cut) to the end of the line"
      },
      {
        "command": "d$",
        "description": "delete (cut) to the end of the line"
      },
      {
        "command": "d^",
        "description": "delete (cut) to the first non-blank character of the line"
      },
      {
        "command": "d0",
        "description": "delete (cut) to the begining of the line"
      },
      {
        "command": "x",
        "description": "delete (cut) character"
      },
      {
        "command": "/pattern",
        "description": "search for pattern"
      },
      {
        "command": "?pattern",
        "description": "search backward for pattern"
      },
      {
        "command": "\\vpattern",
        "description": "'very magic' pattern: non-alphanumeric characters are interpreted as special regex symbols (no escaping needed)"
      },
      {
        "command": "n",
        "description": "repeat search in same direction"
      },
      {
        "command": "N",
        "description": "repeat search in opposite direction"
      },
      {
        "command": ":%s/old/new/g",
        "description": "replace all old with new throughout file"
      },
      {
        "command": ":%s/old/new/gc",
        "description": "replace all old with new throughout file with confirmations"
      },
      {
        "command": ":noh",
        "description": "remove highlighting of search matches"
      },
      {
        "command": ":vimgrep /pattern/ {file}",
        "description": "search for pattern in multiple files"
      },
      {
        "command": ":cn",
        "description": "jump to the next match"
      },
      {
        "command": ":cp",
        "description": "jump to the previous match"
      },
      {
        "command": ":copen",
        "description": "open a window containing the list of matches"
      },
      {
        "command": ":w",
        "description": "write (save) the file"
      },
      {
        "command": ":w !sudo tee %",
        "description": "write out the current file using sudo"
      },
      {
        "command": ":wq or :x or ZZ",
        "description": "write (save) and quit"
      },
      {
        "command": ":q",
        "description": "quit (fails if there are unsaved changes)"
      },
      {
        "command": ":q! or ZQ",
        "description": "quit and throw away unsaved changes"
      },
      {
        "command": ":e file",
        "description": "edit a file in a new buffer"
      },
      {
        "command": ":bnext or :bn",
        "description": "go to the next buffer"
      },
      {
        "command": ":bprev or :bp",
        "description": "go to the previous buffer"
      },
      {
        "command": ":bd",
        "description": "delete a buffer (close a file)"
      },
      {
        "command": ":ls",
        "description": "list all open buffers"
      },
      {
        "command": ":sp file",
        "description": "open a file in a new buffer and split window"
      },
      {
        "command": ":vsp file",
        "description": "open a file in a new buffer and vertically split window"
      },
      {
        "command": "Ctrl + ws",
        "description": "split window"
      },
      {
        "command": "Ctrl + ww",
        "description": "switch windows"
      },
      {
        "command": "Ctrl + wq",
        "description": "quit a window"
      },
      {
        "command": "Ctrl + wv",
        "description": "split window vertically"
      },
      {
        "command": "Ctrl + wh",
        "description": "move cursor to the left window (vertical split)"
      },
      {
        "command": "Ctrl + wl",
        "description": "move cursor to the right window (vertical split)"
      },
      {
        "command": "Ctrl + wj",
        "description": "move cursor to the window below (horizontal split)"
      },
      {
        "command": "Ctrl + wk",
        "description": "move cursor to the window above (horizontal split)"
      },
      {
        "command": ":tabnew or :tabnew file",
        "description": "open a file in a new tab"
      },
      {
        "command": "Ctrl + wT",
        "description": "move the current split window into its own tab"
      },
      {
        "command": "gt or :tabnext or :tabn",
        "description": "move to the next tab"
      },
      {
        "command": "gT or :tabprev or :tabp",
        "description": "move to the previous tab"
      },
      {
        "command": "<number>gt",
        "description": "move to tab <number>"
      },
      {
        "command": ":tabmove <number>",
        "description": "move current tab to the <number>th position (indexed from 0)"
      },
      {
        "command": ":tabclose or :tabc",
        "description": "close the current tab and all its windows"
      },
      {
        "command": ":tabonly or :tabo",
        "description": "close all tabs except for the current one"
      },
      {
        "command": ":tabdo command",
        "description": "run the command on all tabs (e.g. :tabdo q - closes all opened tabs)"
      }
    ]
  },
  {
    "id": "Docker",
    "color": "#b40000",
    "image": "docker.png",
    "description": "Docker is a software platform for building applications based on containers — small and lightweight execution environments that make shared use of the operating system kernel but otherwise run in isolation from one another.",
    "url": "https://www.docker.com/",
    "tags": ["devops", "cloud"],
    "cheatsheet": [
      {
        "command": "docker run <image-name>",
        "description": "Creates a container and runs it"
      },
      {
        "command": "docker create <image name>",
        "description": "Creates a container from given image and returns the container id"
      },
      {
        "command": "docker start <container id>",
        "description": "Starts a container by given id of a already created command."
      },
      {
        "command": "docker ps -a",
        "description": "List of all the containers"
      },
      {
        "command": "docker ps",
        "description": "List of running containers"
      },
      {
        "command": "docker restart <container id>",
        "description": "Kills the container and start it."
      },
      {
        "command": "docker rm <container id>",
        "description": "Remove a container"
      },
      {
        "command": "docker system prune",
        "description": "Clean up all docker objects like container"
      },
      {
        "command": "docker run -it <image name>",
        "description": "Creates a container and runs it in interactive mode"
      },
      {
        "command": "docker run <image name> <arguments>",
        "description": "Runs a container and returns output based on argument. Eg. docker run ubuntu pwd"
      },
      {
        "command": "docker run -d <image name>",
        "description": "Run a container in detached mode(background)"
      },
      {
        "command": "docker exec <container id> <command>",
        "description": "Execute command inside a container. Use `-it` if you want it interactive"
      },
      {
        "command": "docker logs <container id>",
        "description": "Fetches logs on running container"
      },
      {
        "command": "docker logs -f <container id>",
        "description": "Fetches real-time logs on running container"
      },
      {
        "command": "docker stop <container id>",
        "description": "Stops a container gracefully(SIGTERM"
      },
      {
        "command": "docker kill <container id>",
        "description": "Stops a container immediately(SIGKILL)"
      },
      {
        "command": "docker run -p <host port:container port> <image name>",
        "description": "Access a port that is inside a container and map it to another port"
      },
      {
        "command": "docker build <build context>",
        "description": "Looks for `Dockerfile` in this directory and runs it. This builds the image"
      },
      {
        "command": "docker build -f <custom dockerfile> <context>",
        "description": "Build from custom dockerfile"
      },
      {
        "command": "docker login -u <your docker id>  --password <your docker password>",
        "description": "Login to docker hub"
      },
      {
        "command": "docker push <your docker id>/<image tag with version>",
        "description": "Push image to docker hub"
      },
      {
        "command": "docker-compose up",
        "description": "Runs a docker compose file"
      },
      {
        "command": "docker-compose up -d",
        "description": "Runs docker compose in detached mode"
      },
      {
        "command": "docker-compose ps",
        "description": "List containers which are part of current application"
      },
      {
        "command": "docker-compose exec <service name> <command>",
        "description": "Executing commands inside a service"
      },
      {
        "command": "docker-compose logs <service name>",
        "description": "Retrieve logs from running service"
      },
      {
        "command": "docker-compose stop",
        "description": "Stop the running services gracefully"
      },
      {
        "command": "docker-compose kill",
        "description": "Stops the running services immediately"
      },
      {
        "command": "docker-compose down",
        "description": "Stop the running services gracefully and remove the containers later."
      }
    ]
  },
  {
    "id": "NPM",
    "color": "#b40000",
    "image": "npm.png",
    "description": "NPM is a package manager for the JavaScript and default package manager for the JavaScript runtime environment Node.js. It consists of a command line client, also called npm, and an online database of public and paid-for private packages, called the npm registry",
    "url": "https://www.npmjs.com/",
    "tags": ["web"],
    "cheatsheet": [
      {
        "command": "npm install <package-name> --save",
        "description": "Installs a package and adds to dependencies"
      },
      {
        "command": "npm install <package-name> --save-dev",
        "description": "Installs a package and adds to dev dependencies"
      },
      {
        "command": "npm install <package-name> --save-optional",
        "description": "Installs a package and adds to optional dependencies"
      },
      {
        "command": "npm install <package-name> --global",
        "description": "Installs a package and adds globally"
      },
      {
        "command": "npm install <package-name> --package-lock-only",
        "description": "Removes package-lock merge conflicts. NOTE: Works for npm>=5.7.0. Before running this resolve merge conflicts in package.json if any"
      },
      {
        "command": "npm uninstall <package-name>",
        "description": "uninstalls and package"
      },
      {
        "command": "npm uninstall <package-name> --save",
        "description": "uninstalls and package and removes from dependencies in package.json"
      },
      {
        "command": "npm uninstall <package-name> --save-dev",
        "description": "uninstalls and package and removes from devDependencies in package.json"
      },
      {
        "command": "npm uninstall <package-name> --save-optional",
        "description": "uninstalls and package and removes from optionalDependencies in package.json"
      },
      {
        "command": "npm uninstall <package-name> --no-save",
        "description": "uninstalls and package and doesn't remove from package.json"
      },
      {
        "command": "npm update <package-name>",
        "description": "updates a package with defined/latest version"
      },
      {
        "command": "npm init",
        "description": "create package.json"
      },
      {
        "command": "npm ls",
        "description": "list every package installed in current directory"
      },
      {
        "command": "npm search <search-term>",
        "description": "searches for package in current directory. Shows description"
      },
      {
        "command": "npm docs <package-name>",
        "description": "opens documentation of the specified package"
      },
      {
        "command": "npm publish <path-to-package>",
        "description": "publishes package to npm directory"
      },
      {
        "command": "npm unpublish <path-to-package>",
        "description": "removes package to npm registry"
      },
      {
        "command": "npm tag <package-name> <tag-name>",
        "description": "adds tag to defined package"
      },
      {
        "command": "npm outdated",
        "description": "checks if any package is outdated"
      },
      {
        "command": "npm dedupe <package-name>",
        "description": "removes duplicate of the referenced packages"
      },
      {
        "command": "npm run <script-name>",
        "description": "runs a script defined in package.json. Eg start"
      },
      {
        "command": "npm edit <package-name>",
        "description": "edit the specified package"
      }
    ]
  },
  {
    "id": "Golang",
    "color": "#b40000",
    "image": "go.png",
    "description": "Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.",
    "url": "https://golang.org/",
    "tags": ["programming, backend"],
    "cheatsheet": [
      {
        "command": "go bug",
        "description": "start a bug report"
      },
      {
        "command": "go build <package>",
        "description": "compile packages and dependencies"
      },
      {
        "command": "go clean <package>",
        "description": "remove object files and cached files"
      },
      {
        "command": "go doc",
        "description": "show documentation for current package"
      },
      {
        "command": "go doc <package>",
        "description": "show documentation for package"
      },
      {
        "command": "go env",
        "description": "print Go environment information"
      },
      {
        "command": "go fix",
        "description": "update packages to use new APIs"
      },
      {
        "command": "go help <command>",
        "description": "get information about a command"
      },
      {
        "command": "go fmt",
        "description": "format go programs. Read more - https://golang.org/cmd/gofmt/"
      },
      {
        "command": "go get <url-to-package>",
        "description": "download and install packages and dependencies. Eg. go get github.com/urfave/cli"
      },
      {
        "command": "go install",
        "description": "compile and install packages and dependencies"
      },
      {
        "command": "go list",
        "description": "list packages or modules used in current project"
      },
      {
        "command": "go mod",
        "description": "module maintenance"
      },
      {
        "command": "go mod init",
        "description": "initialize new module  with the go.mod and go.sum file in current project."
      },
      {
        "command": "go mod tidy",
        "description": "add missing and remove unused modules"
      },
      {
        "command": "go mod graph",
        "description": "Print module requirement graph"
      },
      {
        "command": "go run <file.go>",
        "description": "compile and run Go program (with main)"
      },
      {
        "command": "go test <package>",
        "description": "runs test for defined package or if not then runs tests for current package."
      },
      {
        "command": "go version",
        "description": "print current Go version"
      },
      {
        "command": "go vet",
        "description": "report likely mistakes in packages"
      },
      {
        "command": "GOROOT",
        "description": "path to where the Go standard library is located on your local filesystem. Default - /usr/local/go"
      },
      {
        "command": "GOBIN",
        "description": "path to where your Go binaries are installed from running go install. Default -  $GOPATH/bin"
      },
      {
        "command": "GOOS",
        "description": "tells the processor architechture"
      },
      {
        "command": "GOPATH",
        "description": "path to your workspace. It is a required config (has no default value)."
      },
      {
        "command": "GOPROXY",
        "description": "URL of Go module proxy. You can set it as https://proxy.golang.org"
      },
      {
        "command": "GOBIN",
        "description": "directory where \"go install\" will install a command"
      },
      {
        "command": "GO111MODULE=on <command>",
        "description": "when you want to select specific version of package inside a GOPATH package. Works with go.mod"
      }
    ]
  }
]
